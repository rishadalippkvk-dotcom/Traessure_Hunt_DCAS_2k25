# Generated by Django 5.0.1 on 2025-10-24 06:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(max_length=10)),
                ('points', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'achievements',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('total_score', models.IntegerField(default=0)),
                ('games_played', models.IntegerField(default=0)),
                ('best_streak', models.IntegerField(default=0)),
                ('rank', models.CharField(default='ðŸ”° BEGINNER CODER', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['-total_score'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GameSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_token', models.CharField(max_length=255, unique=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('current_level', models.IntegerField(default=0)),
                ('score', models.IntegerField(default=0)),
                ('hints_used', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0)),
                ('max_streak', models.IntegerField(default=0)),
                ('perfect_levels', models.IntegerField(default=0)),
                ('combo_multiplier', models.FloatField(default=1.0)),
                ('riddle_solved', models.BooleanField(default=False)),
                ('wrong_attempts', models.IntegerField(default=0)),
                ('security_wrong_attempts', models.IntegerField(default=0)),
                ('finished', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'game_sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_score', models.IntegerField()),
                ('total_time', models.FloatField()),
                ('completion_date', models.DateTimeField(auto_now_add=True)),
                ('rank_achieved', models.CharField(max_length=100)),
                ('accuracy', models.FloatField()),
                ('speed_score', models.FloatField()),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.gamesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'leaderboard',
                'ordering': ['-final_score', 'total_time'],
            },
        ),
        migrations.CreateModel(
            name='LevelProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_number', models.IntegerField()),
                ('question_category', models.CharField(max_length=100)),
                ('difficulty', models.CharField(max_length=20)),
                ('points_earned', models.IntegerField(default=0)),
                ('bonus_points', models.IntegerField(default=0)),
                ('riddle_attempts', models.IntegerField(default=0)),
                ('security_attempts', models.IntegerField(default=0)),
                ('hint_used', models.BooleanField(default=False)),
                ('security_hint_used', models.BooleanField(default=False)),
                ('riddle_solved', models.BooleanField(default=False)),
                ('level_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('time_spent', models.FloatField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_progress', to='authentication.gamesession')),
            ],
            options={
                'db_table': 'level_progress',
                'ordering': ['level_number'],
                'unique_together': {('session', 'level_number')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.achievement')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.gamesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_achievements',
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
